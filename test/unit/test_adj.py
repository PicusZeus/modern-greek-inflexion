from unittest import TestCase

from icecream import ic

from modern_greek_inflexion.adjective import Adjective
from modern_greek_inflexion._exceptions import NotInGreekException, NotLegalAdjectiveException

# oraios = adjective.Adj('ωραίος')
# kalos = adjective.Adj('καλός')
class AdjectiveTests(TestCase):

    # def test_classes(self):
    #     self.assertDictEqual(
    #         kalos.positive_degree(),
    #         {},
    #         ic(kalos.all())
    #     )

    def test_adj_not_in_greek(self):
        self.assertRaises(NotInGreekException, Adjective, 'kakos')

    def test_pammegethhs(self):
        self.assertRaises(NotLegalAdjectiveException, Adjective, 'ζούδιαρηδης')



    def test_adj_oraios(self):
        self.maxDiff = None

        self.assertDictEqual(
            Adjective('ωραίος').all(),
            # Adj('ωραίος'),
            {'adj': {'pl': {'fem': {'gen': {'ωραίων'}, 'acc': {'ωραίες'}, 'voc': {'ωραίες'}, 'nom': {'ωραίες'}},
                            'masc': {'gen': {'ωραίων'}, 'acc': {'ωραίους'}, 'voc': {'ωραίοι'}, 'nom': {'ωραίοι'}},
                            'neut': {'gen': {'ωραίων'}, 'acc': {'ωραία'}, 'voc': {'ωραία'}, 'nom': {'ωραία'}}},
                     'sg': {'fem': {'gen': {'ωραίας'}, 'acc': {'ωραία'}, 'voc': {'ωραία'}, 'nom': {'ωραία'}},
                            'masc': {'gen': {'ωραίου'}, 'acc': {'ωραίο'}, 'voc': {'ωραίε'}, 'nom': {'ωραίος'}},
                            'neut': {'gen': {'ωραίου'}, 'acc': {'ωραίο'}, 'voc': {'ωραίο'}, 'nom': {'ωραίο'}}}},
             'comp': {'pl': {
                 'fem': {'gen': {'ωραιότερων'}, 'acc': {'ωραιότερες'}, 'voc': {'ωραιότερες'}, 'nom': {'ωραιότερες'}},
                 'masc': {'gen': {'ωραιότερων'}, 'acc': {'ωραιότερους'}, 'voc': {'ωραιότεροι'}, 'nom': {'ωραιότεροι'}},
                 'neut': {'gen': {'ωραιότερων'}, 'acc': {'ωραιότερα'}, 'voc': {'ωραιότερα'}, 'nom': {'ωραιότερα'}}},
                 'sg': {'fem': {'gen': {'ωραιότερης'}, 'acc': {'ωραιότερη'}, 'voc': {'ωραιότερη'},
                                'nom': {'ωραιότερη'}},
                        'masc': {'gen': {'ωραιότερου'}, 'acc': {'ωραιότερο'}, 'voc': {'ωραιότερε'},
                                 'nom': {'ωραιότερος'}},
                        'neut': {'gen': {'ωραιότερου'}, 'acc': {'ωραιότερο'}, 'voc': {'ωραιότερο'},
                                 'nom': {'ωραιότερο'}}}},
             'superl': {'pl': {
                 'fem': {'gen': {'ωραιότατων'}, 'acc': {'ωραιότατες'}, 'voc': {'ωραιότατες'}, 'nom': {'ωραιότατες'}},
                 'masc': {'gen': {'ωραιότατων'}, 'acc': {'ωραιότατους'}, 'voc': {'ωραιότατοι'}, 'nom': {'ωραιότατοι'}},
                 'neut': {'gen': {'ωραιότατων'}, 'acc': {'ωραιότατα'}, 'voc': {'ωραιότατα'}, 'nom': {'ωραιότατα'}}},
                 'sg': {'fem': {'gen': {'ωραιότατης'},
                                'acc': {'ωραιότατη'},
                                'voc': {'ωραιότατη'},
                                'nom': {'ωραιότατη'}},
                        'masc': {'gen': {'ωραιότατου'},
                                 'acc': {'ωραιότατο'},
                                 'voc': {'ωραιότατε'},
                                 'nom': {'ωραιότατος'}},
                        'neut': {'gen': {'ωραιότατου'},
                                 'acc': {'ωραιότατο'},
                                 'voc': {'ωραιότατο'},
                                 'nom': {'ωραιότατο'}}}},
             'adv': {'ωραία'},
             'comp_adv': {'ωραιότερα'},
             'superl_adv': {'ωραιότατα'}},
            # ic(oraios.all())
        )

    def test_adj_enkuos(self):
        self.assertDictEqual(
            Adjective('έγκυος').all(),
            {'adj': {'pl': {'masc': {'gen': {'έγκυων'}, 'nom': {'έγκυοι'}, 'voc': {'έγκυοι'}, 'acc': {'έγκυους'}},
                            'neut': {'gen': {'έγκυων'}, 'nom': {'έγκυα'}, 'voc': {'έγκυα'}, 'acc': {'έγκυα'}},
                            'fem': {'gen': {'έγκυων'}, 'nom': {'έγκυοι', 'έγκυες'}, 'voc': {'έγκυοι', 'έγκυες'},
                                    'acc': {'έγκυους', 'έγκυες'}}},
                     'sg': {'masc': {'gen': {'έγκυου'}, 'nom': {'έγκυος'}, 'voc': {'έγκυε'}, 'acc': {'έγκυο'}},
                            'neut': {'gen': {'έγκυου'}, 'nom': {'έγκυο'}, 'voc': {'έγκυο'}, 'acc': {'έγκυο'}},
                            'fem': {'gen': {'έγκυας', 'έγκυου'}, 'nom': {'έγκυα', 'έγκυος'}, 'voc': {'έγκυε', 'έγκυα'},
                                    'acc': {'έγκυο', 'έγκυα'}}}}},

        )

    def test_adj_bathiskiwtos(self):
        self.assertDictEqual(
            Adjective('βαθύσκιωτος').all(),
            {'adj': {'pl': {'fem': {'acc': {'βαθύσκιωτες'},
                                    'gen': {'βαθύσκιωτων'},
                                    'nom': {'βαθύσκιωτες'},
                                    'voc': {'βαθύσκιωτες'}},
                            'masc': {'acc': {'βαθύσκιωτους'},
                                     'gen': {'βαθύσκιωτων'},
                                     'nom': {'βαθύσκιωτοι'},
                                     'voc': {'βαθύσκιωτοι'}},
                            'neut': {'acc': {'βαθύσκιωτα'},
                                     'gen': {'βαθύσκιωτων'},
                                     'nom': {'βαθύσκιωτα'},
                                     'voc': {'βαθύσκιωτα'}}},
                     'sg': {'fem': {'acc': {'βαθύσκιωτη'},
                                    'gen': {'βαθύσκιωτης'},
                                    'nom': {'βαθύσκιωτη'},
                                    'voc': {'βαθύσκιωτη'}},
                            'masc': {'acc': {'βαθύσκιωτο'},
                                     'gen': {'βαθύσκιωτου'},
                                     'nom': {'βαθύσκιωτος'},
                                     'voc': {'βαθύσκιωτε'}},
                            'neut': {'acc': {'βαθύσκιωτο'},
                                     'gen': {'βαθύσκιωτου'},
                                     'nom': {'βαθύσκιωτο'},
                                     'voc': {'βαθύσκιωτο'}}}},
             'adv': {'βαθύσκιωτα'}}

        )

    def test_adj_klepsas(self):
        self.assertDictEqual(
            Adjective('κλέψας').all(),
            {'adj': {'pl': {'fem': {'acc': {'κλέψασες'},
                                    'gen': {'κλεψασών'},
                                    'nom': {'κλέψασες'},
                                    'voc': {'κλέψασες'}},
                            'masc': {'acc': {'κλέψαντες'},
                                     'gen': {'κλεψάντων'},
                                     'nom': {'κλέψαντες'},
                                     'voc': {'κλέψαντες'}},
                            'neut': {'acc': {'κλέψαντα'},
                                     'gen': {'κλεψάντων'},
                                     'nom': {'κλέψαντα'},
                                     'voc': {'κλέψαντα'}}},
                     'sg': {'fem': {'acc': {'κλέψασα'},
                                    'gen': {'κλέψασας'},
                                    'nom': {'κλέψασα'},
                                    'voc': {'κλέψασα'}},
                            'masc': {'acc': {'κλέψαντα'},
                                     'gen': {'κλέψαντος'},
                                     'nom': {'κλέψας'},
                                     'voc': {'κλέψας'}},
                            'neut': {'acc': {'κλέψαν'},
                                     'gen': {'κλέψαντος'},
                                     'nom': {'κλέψαν'},
                                     'voc': {'κλέψαν'}}}}}

        )
    def test_adj_monopous(self):
        self.assertDictEqual(
            Adjective('μονόπους').all(),
            {'adj': {'pl': {'fem': {'acc': {'μονόποδες'},
                                    'gen': {'μονοπόδων'},
                                    'nom': {'μονόποδες'},
                                    'voc': {'μονόποδες'}},
                            'masc': {'acc': {'μονόποδες'},
                                     'gen': {'μονοπόδων'},
                                     'nom': {'μονόποδες'},
                                     'voc': {'μονόποδες'}},
                            'neut': {'acc': {'μονόποδα'},
                                     'gen': {'μονοπόδων'},
                                     'nom': {'μονόποδα'},
                                     'voc': {'μονόποδα'}}},
                     'sg': {'fem': {'acc': {'μονόποδα'},
                                    'gen': {'μονόποδος'},
                                    'nom': {'μονόπους'},
                                    'voc': {'μονόπους'}},
                            'masc': {'acc': {'μονόποδα'},
                                     'gen': {'μονόποδος'},
                                     'nom': {'μονόπους'},
                                     'voc': {'μονόπους'}},
                            'neut': {'acc': {'μονόπουν'},
                                     'gen': {'μονόποδος'},
                                     'nom': {'μονόπουν'},
                                     'voc': {'μονόπουν'}}}}}

        )

    def test_adj_yperhliks(self):
        self.assertDictEqual(
            Adjective('υπερήλιξ').all(),
            {'adj': {'pl': {'neut': {'acc': {''}, 'nom': {''}, 'voc': {''}, 'gen': {''}},
                            'fem': {'acc': {'υπερήλικες'}, 'nom': {'υπερήλικες'}, 'voc': {'υπερήλικες'},
                                    'gen': {'υπερηλικών'}},
                            'masc': {'acc': {'υπερήλικες'}, 'nom': {'υπερήλικες'}, 'voc': {'υπερήλικες'},
                                     'gen': {'υπερηλίκων'}}},
                     'sg': {'neut': {'acc': {''}, 'nom': {''}, 'voc': {''}, 'gen': {''}},
                            'fem': {'acc': {'υπερήλικα'}, 'nom': {'υπερήλιξ'}, 'voc': {'υπερήλιξ'},
                                    'gen': {'υπερήλικος'}},
                            'masc': {'acc': {'υπερήλικα'}, 'nom': {'υπερήλιξ'}, 'voc': {'υπερήλιξ'},
                                     'gen': {'υπερήλικος'}}}}}
        )

    def test_adj_ferelpis(self):
        self.assertDictEqual(
            Adjective('φέρελπις').all(),
            {'adj': {'pl': {'fem': {'acc': {'φερέλπιδες'},
                                    'gen': {'φερελπίδων', 'φερέλπιδων'},
                                    'nom': {'φερέλπιδες'},
                                    'voc': {'φερέλπιδες'}},
                            'masc': {'acc': {'φερέλπιδες'},
                                     'gen': {'φερελπίδων', 'φερέλπιδων'},
                                     'nom': {'φερέλπιδες'},
                                     'voc': {'φερέλπιδες'}},
                            'neut': {'acc': {'φερέλπιδα'},
                                     'gen': {'φερελπίδων', 'φερέλπιδων'},
                                     'nom': {'φερέλπιδα'},
                                     'voc': {'φερέλπιδα'}}},
                     'sg': {'fem': {'acc': {'φέρελπι'},
                                    'gen': {'φερέλπιδος'},
                                    'nom': {'φέρελπις'},
                                    'voc': {'φέρελπι'}},
                            'masc': {'acc': {'φέρελπι'},
                                     'gen': {'φερέλπιδος'},
                                     'nom': {'φέρελπις'},
                                     'voc': {'φέρελπι'}},
                            'neut': {'acc': {'φέρελπι'},
                                     'gen': {'φερέλπιδος'},
                                     'nom': {'φέρελπι'},
                                     'voc': {'φέρελπι'}}}}},

        )

    def test_asteroeis(self):
        self.assertDictEqual(
            Adjective('αστερόεις').all(),
            {'adj': {'pl': {'fem': {'acc': {'αστερόεσσες'},
                                    'gen': {'αστεροεσσών'},
                                    'nom': {'αστερόεσσες'},
                                    'voc': {'αστερόεσσες'}},
                            'masc': {'acc': {'αστερόεντες'},
                                     'gen': {'αστεροέντων'},
                                     'nom': {'αστερόεντες'},
                                     'voc': {'αστερόεντες'}},
                            'neut': {'acc': {'αστερόεντα'},
                                     'gen': {'αστεροέντων'},
                                     'nom': {'αστερόεντα'},
                                     'voc': {'αστερόεντα'}}},
                     'sg': {'fem': {'acc': {'αστερόεσσα'},
                                    'gen': {'αστερόεσσας'},
                                    'nom': {'αστερόεσσα'},
                                    'voc': {'αστερόεσσα'}},
                            'masc': {'acc': {'αστερόεντα'},
                                     'gen': {'αστερόεντος'},
                                     'nom': {'αστερόεις'},
                                     'voc': {'αστερόεις'}},
                            'neut': {'acc': {'αστερόεν'},
                                     'gen': {'αστερόεντος'},
                                     'nom': {'αστερόεν'},
                                     'voc': {'αστερόεν'}}}}},

        )

    def test_afestws(self):
        self.assertDictEqual(
            Adjective('αφεστώς').all(),
            {'adj': {'pl': {'fem': {'acc': {'αφεστώσες'},
                                    'gen': {'αφεστώσων'},
                                    'nom': {'αφεστώσες'},
                                    'voc': {'αφεστώσες'}},
                            'masc': {'acc': {'αφεστώτες'},
                                     'gen': {'αφεστώτων'},
                                     'nom': {'αφεστώτες'},
                                     'voc': {'αφεστώτες'}},
                            'neut': {'acc': {'αφεστώτα'},
                                     'gen': {'αφεστώτων'},
                                     'nom': {'αφεστώτα'},
                                     'voc': {'αφεστώτα'}}},
                     'sg': {'fem': {'acc': {'αφεστώσα'},
                                    'gen': {'αφεστώσας'},
                                    'nom': {'αφεστώσα'},
                                    'voc': {'αφεστώσα'}},
                            'masc': {'acc': {'αφεστώτα'},
                                     'gen': {'αφεστώτος'},
                                     'nom': {'αφεστώς'},
                                     'voc': {'αφεστώς'}},
                            'neut': {'acc': {'αφεστώς'},
                                     'gen': {'αφεστώτος'},
                                     'nom': {'αφεστώς'},
                                     'voc': {'αφεστώς'}}}}}

        )

    def test_adj_sidirous(self):
        self.assertDictEqual(
            Adjective('σιδηρούς').all(),
            {'adj':
                 {'sg':
                      {'masc': {'gen': {'σιδηρού'}, 'nom': {'σιδηρούς'}, 'acc': {'σιδηρούν', 'σιδηρού'}, 'voc': {'σιδηρούς'}},
                       'neut': {'gen': {'σιδηρούν', 'σιδηρού'}, 'nom': {'σιδηρούν'}, 'acc': {'σιδηρούν'}, 'voc': {'σιδηρούν'}},
                       'fem': {'gen': {'σιδηράς'}, 'nom': {'σιδηρά'}, 'acc': {'σιδηρά'}, 'voc': {'σιδηρά'}}},
                  'pl': {'masc': {'gen': {'σιδηρών'}, 'nom': {'σιδηροί'}, 'acc': {'σιδηρούς'}, 'voc': {'σιδηροί'}},
                         'neut': {'gen': {'σιδηρών'}, 'nom': {'σιδηρά'}, 'acc': {'σιδηρά'}, 'voc': {'σιδηρά'}},
                         'fem': {'gen': {'σιδηρών'}, 'nom': {'σιδηρές'}, 'acc': {'σιδηρές'}, 'voc': {'σιδηρές'}}}}},

        )

    def test_adj_portokali(self):
        self.assertDictEqual(
            Adjective('πορτοκαλί').basic_forms,
            {'adj': 'πορτοκαλί/πορτοκαλί/πορτοκαλί', 'comparative': '', 'adverb': 'πορτοκαλί', 'adverb_comparative': ''}
        )

    def test_adj_porfyroxrous(self):
        self.assertDictEqual(
            Adjective('πορφυρόχρους').all(),
            {'adj': {'pl': {'masc': {'gen': {'πορφυροχρόων'}, 'voc': {'πορφυρόχροες'}, 'nom': {'πορφυρόχροες'},
                                     'acc': {'πορφυρόχροες'}},
                            'fem': {'gen': {'πορφυροχρόων'}, 'voc': {'πορφυρόχροες'}, 'nom': {'πορφυρόχροες'},
                                    'acc': {'πορφυρόχροες'}},
                            'neut': {'gen': {'πορφυροχρόων'}, 'voc': {'πορφυρόχροα'}, 'nom': {'πορφυρόχροα'},
                                     'acc': {'πορφυρόχροα'}}}, 'sg': {
                'masc': {'gen': {'πορφυρόχρου'}, 'voc': {'πορφυρόχρους'}, 'nom': {'πορφυρόχρους'},
                         'acc': {'πορφυρόχρου'}},
                'fem': {'gen': {'πορφυρόχρου'}, 'voc': {'πορφυρόχρους'}, 'nom': {'πορφυρόχρους'},
                        'acc': {'πορφυρόχρου'}},
                'neut': {'gen': {'πορφυρόχρου'}, 'voc': {'πορφυρόχρουν'}, 'nom': {'πορφυρόχρουν'},
                         'acc': {'πορφυρόχρουν'}}}}}

        )

    def test_adj_melas(self):
        self.assertDictEqual(

            Adjective('μέλας').all(),
            {'adj': {'sg': {'fem': {'voc': {'μέλαινα'}, 'gen': {'μέλαινας'}, 'acc': {'μέλαινα'}, 'nom': {'μέλαινα'}},
                            'masc': {'voc': {'μέλαν'}, 'gen': {'μέλανος'}, 'acc': {'μέλανα'}, 'nom': {'μέλας'}},
                            'neut': {'voc': {'μέλαν'}, 'gen': {'μέλανος'}, 'acc': {'μέλαν'}, 'nom': {'μέλαν'}}},
                     'pl': {'fem': {'voc': {'μέλαινες'}, 'gen': {'μελαινών'}, 'acc': {'μέλαινες'}, 'nom': {'μέλαινες'}},
                            'masc': {'voc': {'μέλανες'}, 'gen': {'μελάνων'}, 'acc': {'μέλανες'}, 'nom': {'μέλανες'}},
                            'neut': {'voc': {'μέλανα'}, 'gen': {'μελάνων'}, 'acc': {'μέλανα'}, 'nom': {'μέλανα'}}}}}
        )

    def test_adj_rodis(self):
        self.assertDictEqual(
            Adjective('ροδής').all(),
            {'adj': {'sg': {'fem': {'nom': {'ροδιά'}, 'voc': {'ροδιά'}, 'gen': {'ροδιάς'}, 'acc': {'ροδιά'}},
                            'masc': {'nom': {'ροδής'}, 'voc': {'ροδή'}, 'gen': {'ροδή'}, 'acc': {'ροδή'}},
                            'neut': {'nom': {'ροδί'}, 'voc': {'ροδί'}, 'gen': {'ροδιού'}, 'acc': {'ροδί'}}},
                     'pl': {'fem': {'nom': {'ροδιές'}, 'voc': {'ροδιές'}, 'gen': {'ροδιών'}, 'acc': {'ροδιές'}},
                            'masc': {'nom': {'ροδιοί'}, 'voc': {'ροδιοί'}, 'gen': {'ροδιών'}, 'acc': {'ροδιούς'}},
                            'neut': {'nom': {'ροδιά'}, 'voc': {'ροδιά'}, 'gen': {'ροδιών'}, 'acc': {'ροδιά'}}}},
             'adv': {'ροδιά'}}
        )

    def test_adj_akamatis(self):
        self.assertDictEqual(
            Adjective('ακαμάτης').all(),
            {'adj': {'pl': {
                'fem': {'gen': {''}, 'nom': {'ακαμάτισσες'}, 'voc': {'ακαμάτισσες'}, 'acc': {'ακαμάτισσες'}},
                'neut': {'gen': {'ακαμάτικων'}, 'nom': {'ακαμάτικα'}, 'voc': {'ακαμάτικα'}, 'acc': {'ακαμάτικα'}},
                'masc': {'gen': {'ακαμάτηδων'}, 'nom': {'ακαμάτηδες'}, 'voc': {'ακαμάτηδες'}, 'acc': {'ακαμάτηδες'}}},
                'sg': {'fem': {'gen': {'ακαμάτισσας'}, 'nom': {'ακαμάτισσα'}, 'voc': {'ακαμάτισσα'},
                               'acc': {'ακαμάτισσα'}},
                       'neut': {'gen': {'ακαμάτικου'}, 'nom': {'ακαμάτικο'}, 'voc': {'ακαμάτικο'},
                                'acc': {'ακαμάτικο'}},
                       'masc': {'gen': {'ακαμάτη'}, 'nom': {'ακαμάτης'}, 'voc': {'ακαμάτη'}, 'acc': {'ακαμάτη'}}}}}
        )


    def test_adj_euelpis(self):
        self.assertDictEqual(
            Adjective('εύελπις').all(),
            {'adj': {'pl': {'fem': {'acc': {'ευέλπιδες'},
                                    'gen': {'ευελπίδων', 'ευέλπιδων'},
                                    'nom': {'ευέλπιδες'},
                                    'voc': {'ευέλπιδες'}},
                            'masc': {'acc': {'ευέλπιδες'},
                                     'gen': {'ευελπίδων', 'ευέλπιδων'},
                                     'nom': {'ευέλπιδες'},
                                     'voc': {'ευέλπιδες'}},
                            'neut': {'acc': {'ευέλπιδα'},
                                     'gen': {'ευελπίδων', 'ευέλπιδων'},
                                     'nom': {'ευέλπιδα'},
                                     'voc': {'ευέλπιδα'}}},
                     'sg': {'fem': {'acc': {'εύελπι'},
                                    'gen': {'ευέλπιδος'},
                                    'nom': {'εύελπις'},
                                    'voc': {'εύελπι'}},
                            'masc': {'acc': {'εύελπι'},
                                     'gen': {'ευέλπιδος'},
                                     'nom': {'εύελπις'},
                                     'voc': {'εύελπι'}},
                            'neut': {'acc': {'εύελπι'},
                                     'gen': {'ευέλπιδος'},
                                     'nom': {'εύελπι'},
                                     'voc': {'εύελπι'}}}}}
        )

    def test_adj_peripetiodhs(self):
        self.assertDictEqual(
            Adjective('περιπετειώδης').all(),
            {'adj': {'pl': {'fem': {'acc': {'περιπετειώδεις'},
                                    'gen': {'περιπετειωδών'},
                                    'nom': {'περιπετειώδεις'},
                                    'voc': {'περιπετειώδεις'}},
                            'masc': {'acc': {'περιπετειώδεις'},
                                     'gen': {'περιπετειωδών'},
                                     'nom': {'περιπετειώδεις'},
                                     'voc': {'περιπετειώδεις'}},
                            'neut': {'acc': {'περιπετειώδη'},
                                     'gen': {'περιπετειωδών'},
                                     'nom': {'περιπετειώδη'},
                                     'voc': {'περιπετειώδη'}}},
                     'sg': {'fem': {'acc': {'περιπετειώδη'},
                                    'gen': {'περιπετειώδους'},
                                    'nom': {'περιπετειώδης'},
                                    'voc': {'περιπετειώδης'}},
                            'masc': {'acc': {'περιπετειώδη'},
                                     'gen': {'περιπετειώδους'},
                                     'nom': {'περιπετειώδης'},
                                     'voc': {'περιπετειώδη'}},
                            'neut': {'acc': {'περιπετειώδες'},
                                     'gen': {'περιπετειώδους'},
                                     'nom': {'περιπετειώδες'},
                                     'voc': {'περιπετειώδες'}}}}}

        )

    def test_adj_argos(self):
        self.assertDictEqual(
            Adjective('αργός').all(),
            {'adj': {'pl': {'fem': {'gen': {'αργών'}, 'nom': {'αργές'}, 'acc': {'αργές'}, 'voc': {'αργές'}},
                            'masc': {'gen': {'αργών'}, 'nom': {'αργοί'}, 'acc': {'αργούς'}, 'voc': {'αργοί'}},
                            'neut': {'gen': {'αργών'}, 'nom': {'αργά'}, 'acc': {'αργά'}, 'voc': {'αργά'}}},
                     'sg': {'fem': {'gen': {'αργής'}, 'nom': {'αργή'}, 'acc': {'αργή'}, 'voc': {'αργή'}},
                            'masc': {'gen': {'αργού'}, 'nom': {'αργός'}, 'acc': {'αργό'}, 'voc': {'αργέ'}},
                            'neut': {'gen': {'αργού'}, 'nom': {'αργό'}, 'acc': {'αργό'}, 'voc': {'αργό'}}}}, 'comp': {
                'pl': {'fem': {'gen': {'αργότερων'}, 'nom': {'αργότερες'}, 'acc': {'αργότερες'}, 'voc': {'αργότερες'}},
                       'masc': {'gen': {'αργότερων'}, 'nom': {'αργότεροι'}, 'acc': {'αργότερους'},
                                'voc': {'αργότεροι'}},
                       'neut': {'gen': {'αργότερων'}, 'nom': {'αργότερα'}, 'acc': {'αργότερα'}, 'voc': {'αργότερα'}}},
                'sg': {'fem': {'gen': {'αργότερης'}, 'nom': {'αργότερη'}, 'acc': {'αργότερη'}, 'voc': {'αργότερη'}},
                       'masc': {'gen': {'αργότερου'}, 'nom': {'αργότερος'}, 'acc': {'αργότερο'}, 'voc': {'αργότερε'}},
                       'neut': {'gen': {'αργότερου'}, 'nom': {'αργότερο'}, 'acc': {'αργότερο'}, 'voc': {'αργότερο'}}}},
             'adv': {'αργά'}, 'comp_adv': {'αργότερα'}},
        )

    def test_adj_lhksas(self):
        self.assertDictEqual(
            Adjective('λήξας').all(),
            {'adj': {'pl': {'fem': {'acc': {'λήξασες'},
                                    'gen': {'ληξασών'},
                                    'nom': {'λήξασες'},
                                    'voc': {'λήξασες'}},
                            'masc': {'acc': {'λήξαντες'},
                                     'gen': {'ληξάντων'},
                                     'nom': {'λήξαντες'},
                                     'voc': {'λήξαντες'}},
                            'neut': {'acc': {'λήξαντα'},
                                     'gen': {'ληξάντων'},
                                     'nom': {'λήξαντα'},
                                     'voc': {'λήξαντα'}}},
                     'sg': {'fem': {'acc': {'λήξασα'},
                                    'gen': {'λήξασας'},
                                    'nom': {'λήξασα'},
                                    'voc': {'λήξασα'}},
                            'masc': {'acc': {'λήξαντα'},
                                     'gen': {'λήξαντος', 'λήξαντα'},
                                     'nom': {'λήξας', 'λήξαντας'},
                                     'voc': {'λήξας', 'λήξαντα'}},
                            'neut': {'acc': {'λήξαν'},
                                     'gen': {'λήξαντος'},
                                     'nom': {'λήξαν'},
                                     'voc': {'λήξαν'}}}}},
        )

    def test_adj_kalos(self):
        self.maxDiff = None
        self.assertDictEqual(
            Adjective('καλός').all(),
            {'adj': {'pl': {'neut': {'nom': {'καλά'}, 'voc': {'καλά'}, 'acc': {'καλά'}, 'gen': {'καλών'}},
                            'masc': {'nom': {'καλοί'}, 'voc': {'καλοί'}, 'acc': {'καλούς'}, 'gen': {'καλών'}},
                            'fem': {'nom': {'καλές'}, 'voc': {'καλές'}, 'acc': {'καλές'}, 'gen': {'καλών'}}},
                     'sg': {'neut': {'nom': {'καλό'}, 'voc': {'καλό'}, 'acc': {'καλό'}, 'gen': {'καλού'}},
                            'masc': {'nom': {'καλός'}, 'voc': {'καλέ'}, 'acc': {'καλό'}, 'gen': {'καλού'}},
                            'fem': {'nom': {'καλή'}, 'voc': {'καλή'}, 'acc': {'καλή'}, 'gen': {'καλής'}}}}, 'comp': {
                'pl': {'neut': {'nom': {'καλύτερα'}, 'voc': {'καλύτερα'}, 'acc': {'καλύτερα'}, 'gen': {'καλύτερων'}},
                       'masc': {'nom': {'καλύτεροι'}, 'voc': {'καλύτεροι'}, 'acc': {'καλύτερους'},
                                'gen': {'καλύτερων'}},
                       'fem': {'nom': {'καλύτερες'}, 'voc': {'καλύτερες'}, 'acc': {'καλύτερες'}, 'gen': {'καλύτερων'}}},
                'sg': {'neut': {'nom': {'καλύτερο'}, 'voc': {'καλύτερο'}, 'acc': {'καλύτερο'}, 'gen': {'καλύτερου'}},
                       'masc': {'nom': {'καλύτερος'}, 'voc': {'καλύτερε'}, 'acc': {'καλύτερο'}, 'gen': {'καλύτερου'}},
                       'fem': {'nom': {'καλύτερη'}, 'voc': {'καλύτερη'}, 'acc': {'καλύτερη'}, 'gen': {'καλύτερης'}}}},
             'superl': {'pl': {'fem': {'acc': {'άριστες'},
                                                              'gen': {'αρίστων', 'άριστων'},
                                                              'nom': {'άριστες'},
                                                              'voc': {'άριστες'}},
                                                      'masc': {'acc': {'άριστους', 'αρίστους'},
                                                               'gen': {'αρίστων', 'άριστων'},
                                                               'nom': {'άριστοι'},
                                                               'voc': {'άριστοι'}},
                                                      'neut': {'acc': {'άριστα'},
                                                               'gen': {'αρίστων', 'άριστων'},
                                                               'nom': {'άριστα'},
                                                               'voc': {'άριστα'}}},
                                               'sg': {'fem': {'acc': {'άριστη'},
                                                              'gen': {'άριστης', 'αρίστης'},
                                                              'nom': {'άριστη', 'αρίστη'},
                                                              'voc': {'άριστη', 'αρίστη'}},
                                                      'masc': {'acc': {'άριστο'},
                                                               'gen': {'αρίστου', 'άριστου'},
                                                               'nom': {'άριστος'},
                                                               'voc': {'άριστε'}},
                                                      'neut': {'acc': {'άριστο'},
                                                               'gen': {'αρίστου', 'άριστου'},
                                                               'nom': {'άριστο'},
                                                               'voc': {'άριστο'}}}},
             'adv': {'καλώς', 'καλά'}, 'comp_adv': {'καλύτερα', 'κάλλιον', 'κάλλιο'}, 'superl_adv': {'άριστα'}},
        )

    def test_adj_portokalis(self):
        self.assertDictEqual(
            Adjective('πορτοκαλής').all(),
            {'adj': {'sg': {
                'neut': {'gen': {'πορτοκαλιού'}, 'voc': {'πορτοκαλί'}, 'nom': {'πορτοκαλί'}, 'acc': {'πορτοκαλί'}},
                'masc': {'gen': {'πορτοκαλή'}, 'voc': {'πορτοκαλή'}, 'nom': {'πορτοκαλής'}, 'acc': {'πορτοκαλή'}},
                'fem': {'gen': {'πορτοκαλιάς'}, 'voc': {'πορτοκαλιά'}, 'nom': {'πορτοκαλιά'}, 'acc': {'πορτοκαλιά'}}},
                'pl': {'neut': {'gen': {'πορτοκαλιών'}, 'voc': {'πορτοκαλιά'}, 'nom': {'πορτοκαλιά'},
                                'acc': {'πορτοκαλιά'}},
                       'masc': {'gen': {'πορτοκαλιών'}, 'voc': {'πορτοκαλιοί'}, 'nom': {'πορτοκαλιοί'},
                                'acc': {'πορτοκαλιούς'}},
                       'fem': {'gen': {'πορτοκαλιών'}, 'voc': {'πορτοκαλιές'}, 'nom': {'πορτοκαλιές'},
                               'acc': {'πορτοκαλιές'}}}}, 'adv': {'πορτοκαλιά'}}
        )

    def test_adj_roz(self):
        self.assertDictEqual(
            Adjective('ροζ', aklito=True).all(),
            {'adj': {'sg': {'masc': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}},
                            'neut': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}},
                            'fem': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}}},
                     'pl': {'masc': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}},
                            'neut': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}},
                            'fem': {'nom': {'ροζ'}, 'voc': {'ροζ'}, 'acc': {'ροζ'}, 'gen': {'ροζ'}}}}, 'adv': {'ροζ'}}
        )

    def test_adj_safis(self):
        self.assertDictEqual(
            Adjective('σαφής').all(),
            {'adj': {'pl': {'fem': {'acc': {'σαφείς'}, 'gen': {'σαφών'}, 'nom': {'σαφείς'}, 'voc': {'σαφείς'}},
                            'neut': {'acc': {'σαφή'}, 'gen': {'σαφών'}, 'nom': {'σαφή'}, 'voc': {'σαφή'}},
                            'masc': {'acc': {'σαφείς'}, 'gen': {'σαφών'}, 'nom': {'σαφείς'}, 'voc': {'σαφείς'}}},
                     'sg': {'fem': {'acc': {'σαφή'}, 'gen': {'σαφούς'}, 'nom': {'σαφής'}, 'voc': {'σαφής'}},
                            'neut': {'acc': {'σαφές'}, 'gen': {'σαφούς'}, 'nom': {'σαφές'}, 'voc': {'σαφές'}},
                            'masc': {'acc': {'σαφή'}, 'gen': {'σαφούς'}, 'nom': {'σαφής'}, 'voc': {'σαφή'}}}}, 'comp': {
                'pl': {
                    'fem': {'acc': {'σαφέστερες'}, 'gen': {'σαφέστερων'}, 'nom': {'σαφέστερες'}, 'voc': {'σαφέστερες'}},
                    'neut': {'acc': {'σαφέστερα'}, 'gen': {'σαφέστερων'}, 'nom': {'σαφέστερα'}, 'voc': {'σαφέστερα'}},
                    'masc': {'acc': {'σαφέστερους'}, 'gen': {'σαφέστερων'}, 'nom': {'σαφέστεροι'},
                             'voc': {'σαφέστεροι'}}},
                'sg': {'fem': {'acc': {'σαφέστερη'}, 'gen': {'σαφέστερης'}, 'nom': {'σαφέστερη'}, 'voc': {'σαφέστερη'}},
                       'neut': {'acc': {'σαφέστερο'}, 'gen': {'σαφέστερου'}, 'nom': {'σαφέστερο'},
                                'voc': {'σαφέστερο'}},
                       'masc': {'acc': {'σαφέστερο'}, 'gen': {'σαφέστερου'}, 'nom': {'σαφέστερος'},
                                'voc': {'σαφέστερε'}}}}, 'superl': {'pl': {
                'fem': {'acc': {'σαφέστατες'}, 'gen': {'σαφέστατων'}, 'nom': {'σαφέστατες'}, 'voc': {'σαφέστατες'}},
                'neut': {'acc': {'σαφέστατα'}, 'gen': {'σαφέστατων'}, 'nom': {'σαφέστατα'}, 'voc': {'σαφέστατα'}},
                'masc': {'acc': {'σαφέστατους'}, 'gen': {'σαφέστατων'}, 'nom': {'σαφέστατοι'}, 'voc': {'σαφέστατοι'}}},
                'sg': {'fem': {'acc': {'σαφέστατη'},
                               'gen': {'σαφέστατης'},
                               'nom': {'σαφέστατη'},
                               'voc': {'σαφέστατη'}},
                       'neut': {'acc': {'σαφέστατο'},
                                'gen': {'σαφέστατου'},
                                'nom': {'σαφέστατο'},
                                'voc': {'σαφέστατο'}},
                       'masc': {'acc': {'σαφέστατο'},
                                'gen': {'σαφέστατου'},
                                'nom': {'σαφέστατος'},
                                'voc': {'σαφέστατε'}}}},
             'adv': {'σαφώς'}, 'comp_adv': {'σαφέστερα'}, 'superl_adv': {'σαφέστατα'}}
        )

    def test_adj_tempelis(self):
        self.assertDictEqual(
            Adjective('τεμπέλης').all(),
            {'adj': {'pl': {
                'masc': {'gen': {'τεμπέληδων'}, 'nom': {'τεμπέληδες'}, 'acc': {'τεμπέληδες'}, 'voc': {'τεμπέληδες'}},
                'neut': {'gen': {'τεμπέλικων'}, 'nom': {'τεμπέλικα'}, 'acc': {'τεμπέλικα'}, 'voc': {'τεμπέλικα'}},
                'fem': {'gen': {''}, 'nom': {'τεμπέλες'}, 'acc': {'τεμπέλες'}, 'voc': {'τεμπέλες'}}},
                'sg': {'masc': {'gen': {'τεμπέλη'}, 'nom': {'τεμπέλης'}, 'acc': {'τεμπέλη'}, 'voc': {'τεμπέλη'}},
                       'neut': {'gen': {'τεμπέλικου'}, 'nom': {'τεμπέλικο'}, 'acc': {'τεμπέλικο'},
                                'voc': {'τεμπέλικο'}},
                       'fem': {'gen': {'τεμπέλας'}, 'nom': {'τεμπέλα'}, 'acc': {'τεμπέλα'}, 'voc': {'τεμπέλα'}}}},
                'adv': {'τεμπέλικα'}}
        )

    def test_adj_baris(self):
        self.assertDictEqual(
            Adjective('βαρύς').all(),
            {'adj': {
                'sg': {'neut': {'voc': {'βαρύ'}, 'nom': {'βαρύ'}, 'acc': {'βαρύ'}, 'gen': {'βαρέος', 'βαριού', 'βαρύ'}},
                       'fem': {'voc': {'βαρεία', 'βαριά'}, 'nom': {'βαρεία', 'βαριά'},
                               'acc': {'βαρεία', 'βαριά', 'βαρείαν'}, 'gen': {'βαριάς', 'βαρείας'}},
                       'masc': {'voc': {'βαρύ'}, 'nom': {'βαρύς'}, 'acc': {'βαρύ'},
                                'gen': {'βαρέος', 'βαριού', 'βαρύ'}}}, 'pl': {
                    'neut': {'voc': {'βαριά', 'βαρέα'}, 'nom': {'βαριά', 'βαρέα'}, 'acc': {'βαριά', 'βαρέα'},
                             'gen': {'βαριών', 'βαρέων'}},
                    'fem': {'voc': {'βαριές', 'βαρείες'}, 'nom': {'βαριές', 'βαρείες'}, 'acc': {'βαριές', 'βαρείες'},
                            'gen': {'βαριών', 'βαρειών'}},
                    'masc': {'voc': {'βαρείς', 'βαριοί'}, 'nom': {'βαρείς', 'βαριοί'}, 'acc': {'βαρείς', 'βαριούς'},
                             'gen': {'βαριών', 'βαρέων'}}}}, 'comp': {
                'sg': {'neut': {'voc': {'βαρύτερο'}, 'nom': {'βαρύτερο'}, 'acc': {'βαρύτερο'}, 'gen': {'βαρύτερου'}},
                       'fem': {'voc': {'βαρύτερη'}, 'nom': {'βαρύτερη'}, 'acc': {'βαρύτερη'}, 'gen': {'βαρύτερης'}},
                       'masc': {'voc': {'βαρύτερε'}, 'nom': {'βαρύτερος'}, 'acc': {'βαρύτερο'}, 'gen': {'βαρύτερου'}}},
                'pl': {'neut': {'voc': {'βαρύτερα'}, 'nom': {'βαρύτερα'}, 'acc': {'βαρύτερα'}, 'gen': {'βαρύτερων'}},
                       'fem': {'voc': {'βαρύτερες'}, 'nom': {'βαρύτερες'}, 'acc': {'βαρύτερες'}, 'gen': {'βαρύτερων'}},
                       'masc': {'voc': {'βαρύτεροι'}, 'nom': {'βαρύτεροι'}, 'acc': {'βαρύτερους'},
                                'gen': {'βαρύτερων'}}}}, 'superl': {
                'sg': {'neut': {'voc': {'βαρύτατο'}, 'nom': {'βαρύτατο'}, 'acc': {'βαρύτατο'}, 'gen': {'βαρύτατου'}},
                       'fem': {'voc': {'βαρύτατη'}, 'nom': {'βαρύτατη'}, 'acc': {'βαρύτατη'}, 'gen': {'βαρύτατης'}},
                       'masc': {'voc': {'βαρύτατε'}, 'nom': {'βαρύτατος'}, 'acc': {'βαρύτατο'}, 'gen': {'βαρύτατου'}}},
                'pl': {'neut': {'voc': {'βαρύτατα'}, 'nom': {'βαρύτατα'}, 'acc': {'βαρύτατα'}, 'gen': {'βαρύτατων'}},
                       'fem': {'voc': {'βαρύτατες'}, 'nom': {'βαρύτατες'}, 'acc': {'βαρύτατες'}, 'gen': {'βαρύτατων'}},
                       'masc': {'voc': {'βαρύτατοι'}, 'nom': {'βαρύτατοι'}, 'acc': {'βαρύτατους'},
                                'gen': {'βαρύτατων'}}}}, 'adv': {'βαρέως'}, 'comp_adv': {'βαρύτερα'},
                'superl_adv': {'βαρύτατα'}}
        )

    def test_adj_kakos(self):
        self.assertDictEqual(
            Adjective('κακός').all(),
            {'adj': {'sg': {'masc': {'acc': {'κακό'}, 'gen': {'κακού'}, 'voc': {'κακέ'}, 'nom': {'κακός'}},
                            'fem': {'acc': {'κακή', 'κακιά'}, 'nom': {'κακή', 'κακιά'}, 'voc': {'κακή', 'κακιά'},
                                    'gen': {'κακής', 'κακιάς'}},
                            'neut': {'acc': {'κακό'}, 'gen': {'κακού'}, 'voc': {'κακό'}, 'nom': {'κακό'}}},
                     'pl': {'neut': {'acc': {'κακά'}, 'gen': {'κακών'}, 'voc': {'κακά'}, 'nom': {'κακά'}},
                            'fem': {'acc': {'κακές'}, 'gen': {'κακών'}, 'voc': {'κακές'}, 'nom': {'κακές'}},
                            'masc': {'acc': {'κακούς'}, 'gen': {'κακών'}, 'voc': {'κακοί'}, 'nom': {'κακοί'}}}},
             'comp': {'sg': {
                 'neut': {'acc': {'χειρότερο', 'ήσσον'}, 'nom': {'χειρότερο', 'ήσσον'}, 'voc': {'χειρότερο', 'ήσσον'},
                          'gen': {'ήσσονος', 'χειρότερου'}},
                 'fem': {'acc': {'ήσσονα', 'χειρότερη'}, 'nom': {'χειρότερη', 'ήσσων'}, 'voc': {'χειρότερη', 'ήσσων'},
                         'gen': {'ήσσονος', 'χειρότερης'}},
                 'masc': {'acc': {'ήσσονα', 'χειρότερο'}, 'nom': {'χειρότερος', 'ήσσων'}, 'voc': {'ήσσων', 'χειρότερε'},
                          'gen': {'ήσσονα', 'ήσσονος', 'χειρότερου'}}}, 'pl': {
                 'neut': {'acc': {'ήσσονα', 'χειρότερα'}, 'nom': {'ήσσονα', 'χειρότερα'},
                          'voc': {'ήσσονα', 'χειρότερα'}, 'gen': {'χειρότερων', 'ησσόνων'}},
                 'fem': {'acc': {'χειρότερες', 'ήσσονες'}, 'nom': {'χειρότερες', 'ήσσονες'},
                         'voc': {'χειρότερες', 'ήσσονες'}, 'gen': {'χειρότερων', 'ησσονών'}},
                 'masc': {'acc': {'χειρότερους', 'ήσσονες'}, 'nom': {'χειρότεροι', 'ήσσονες'},
                          'voc': {'χειρότεροι', 'ήσσονες'}, 'gen': {'χειρότερων', 'ησσόνων'}}}}, 'superl': {'pl': {'fem': {'acc': {'ήκιστες', 'χείριστες'},
                                                             'gen': {'χείριστων', 'χειρίστων', 'ήκιστων'},
                                                             'nom': {'ήκιστες', 'χείριστες'},
                                                             'voc': {'ήκιστες', 'χείριστες'}},
                                                     'masc': {'acc': {'χειρίστους', 'ήκιστους', 'χείριστους'},
                                                              'gen': {'χείριστων', 'χειρίστων', 'ήκιστων'},
                                                              'nom': {'ήκιστοι', 'χείριστοι'},
                                                              'voc': {'ήκιστοι', 'χείριστοι'}},
                                                     'neut': {'acc': {'ήκιστα', 'χείριστα'},
                                                              'gen': {'χείριστων', 'χειρίστων', 'ήκιστων'},
                                                              'nom': {'ήκιστα', 'χείριστα'},
                                                              'voc': {'ήκιστα', 'χείριστα'}}},
                                              'sg': {'fem': {'acc': {'ήκιστη', 'χείριστη'},
                                                             'gen': {'χείριστης', 'ήκιστης'},
                                                             'nom': {'ήκιστη', 'χείριστη'},
                                                             'voc': {'ήκιστη', 'χείριστη'}},
                                                     'masc': {'acc': {'ήκιστο', 'χείριστο'},
                                                              'gen': {'ήκιστου', 'χείριστου', 'χειρίστου'},
                                                              'nom': {'χείριστος', 'ήκιστος'},
                                                              'voc': {'χείριστε', 'ήκιστε'}},
                                                     'neut': {'acc': {'ήκιστο', 'χείριστο'},
                                                              'gen': {'ήκιστου', 'χείριστου', 'χειρίστου'},
                                                              'nom': {'ήκιστο', 'χείριστο'},
                                                              'voc': {'ήκιστο', 'χείριστο'}}}}
, 'adv': {'κακώς', 'κακά'},
             'comp_adv': {'ήττον', 'ήσσον', 'χειρότερα'}, 'superl_adv': {'κάκιστα', 'ήκιστα'}},

        )

    def test_adj_pankosmios(self):
        self.assertDictEqual(
            Adjective('παγκόσμιος').all(),
            {'adj': {'pl': {'fem': {'acc': {'παγκόσμιες'},
                                    'gen': {'παγκόσμιων', 'παγκοσμίων'},
                                    'nom': {'παγκόσμιες'},
                                    'voc': {'παγκόσμιες'}},
                            'masc': {'acc': {'παγκοσμίους', 'παγκόσμιους'},
                                     'gen': {'παγκοσμίων', 'παγκόσμιων'},
                                     'nom': {'παγκόσμιοι'},
                                     'voc': {'παγκόσμιοι'}},
                            'neut': {'acc': {'παγκόσμια'},
                                     'gen': {'παγκοσμίων', 'παγκόσμιων'},
                                     'nom': {'παγκόσμια'},
                                     'voc': {'παγκόσμια'}}},
                     'sg': {'fem': {'acc': {'παγκόσμια'},
                                    'gen': {'παγκόσμιας'},
                                    'nom': {'παγκόσμια'},
                                    'voc': {'παγκόσμια'}},
                            'masc': {'acc': {'παγκόσμιο'},
                                     'gen': {'παγκόσμιου', 'παγκοσμίου'},
                                     'nom': {'παγκόσμιος'},
                                     'voc': {'παγκόσμιε'}},
                            'neut': {'acc': {'παγκόσμιο'},
                                     'gen': {'παγκόσμιου', 'παγκοσμίου'},
                                     'nom': {'παγκόσμιο'},
                                     'voc': {'παγκόσμιο'}}}},
             'adv': {'παγκόσμια', 'παγκοσμίως'}},

        )

    def test_adj_plagios(self):
        self.assertDictEqual(
            Adjective('πλάγιος').all(),
            {'adj': {'pl': {'fem': {'acc': {'πλάγιες'},
                                    'gen': {'πλάγιων', 'πλαγίων'},
                                    'nom': {'πλάγιες'},
                                    'voc': {'πλάγιες'}},
                            'masc': {'acc': {'πλαγίους', 'πλάγιους'},
                                     'gen': {'πλάγιων', 'πλαγίων'},
                                     'nom': {'πλάγιοι'},
                                     'voc': {'πλάγιοι'}},
                            'neut': {'acc': {'πλάγια'},
                                     'gen': {'πλάγιων', 'πλαγίων'},
                                     'nom': {'πλάγια'},
                                     'voc': {'πλάγια'}}},
                     'sg': {'fem': {'acc': {'πλάγια', 'πλαγία'},
                                    'gen': {'πλάγιας', 'πλαγίας'},
                                    'nom': {'πλάγια', 'πλαγία'},
                                    'voc': {'πλάγια', 'πλαγία'}},
                            'masc': {'acc': {'πλάγιο'},
                                     'gen': {'πλαγίου', 'πλάγιου'},
                                     'nom': {'πλάγιος'},
                                     'voc': {'πλάγιε'}},
                            'neut': {'acc': {'πλάγιο'},
                                     'gen': {'πλαγίου', 'πλάγιου'},
                                     'nom': {'πλάγιο'},
                                     'voc': {'πλάγιο'}}}},
             'adv': {'πλάγια', 'πλαγίως'}}

        )

    def test_adj_fthoropoios(self):
        self.assertDictEqual(
            Adjective('φθοροποιός').all(),
            {'adj': {'pl': {'fem': {'acc': {'φθοροποιές', 'φθοροποιούς'},
                                    'gen': {'φθοροποιών'},
                                    'nom': {'φθοροποιοί', 'φθοροποιές'},
                                    'voc': {'φθοροποιοί', 'φθοροποιές'}},
                            'masc': {'acc': {'φθοροποιούς'},
                                     'gen': {'φθοροποιών'},
                                     'nom': {'φθοροποιοί'},
                                     'voc': {'φθοροποιοί'}},
                            'neut': {'acc': {'φθοροποιά'},
                                     'gen': {'φθοροποιών'},
                                     'nom': {'φθοροποιά'},
                                     'voc': {'φθοροποιά'}}},
                     'sg': {'fem': {'acc': {'φθοροποιά', 'φθοροποιό'},
                                    'gen': {'φθοροποιάς', 'φθοροποιού'},
                                    'nom': {'φθοροποιά', 'φθοροποιός'},
                                    'voc': {'φθοροποιά', 'φθοροποιέ'}},
                            'masc': {'acc': {'φθοροποιό'},
                                     'gen': {'φθοροποιού'},
                                     'nom': {'φθοροποιός'},
                                     'voc': {'φθοροποιέ'}},
                            'neut': {'acc': {'φθοροποιό'},
                                     'gen': {'φθοροποιού'},
                                     'nom': {'φθοροποιό'},
                                     'voc': {'φθοροποιό'}}}},
             'adv': {'φθοροποιά'}}

        )

    def test_adj_eidopoios(self):
        self.assertDictEqual(
            Adjective('ειδοποιός').all(),
            {'adj': {'pl': {'fem': {'acc': {'ειδοποιούς'},
                                    'gen': {'ειδοποιών'},
                                    'nom': {'ειδοποιοί'},
                                    'voc': {'ειδοποιοί'}},
                            'masc': {'acc': {'ειδοποιούς'},
                                     'gen': {'ειδοποιών'},
                                     'nom': {'ειδοποιοί'},
                                     'voc': {'ειδοποιοί'}},
                            'neut': {'acc': {'ειδοποιά'},
                                     'gen': {'ειδοποιών'},
                                     'nom': {'ειδοποιά'},
                                     'voc': {'ειδοποιά'}}},
                     'sg': {'fem': {'acc': {'ειδοποιό'},
                                    'gen': {'ειδοποιού'},
                                    'nom': {'ειδοποιός'},
                                    'voc': {'ειδοποιέ'}},
                            'masc': {'acc': {'ειδοποιό'},
                                     'gen': {'ειδοποιού'},
                                     'nom': {'ειδοποιός'},
                                     'voc': {'ειδοποιέ'}},
                            'neut': {'acc': {'ειδοποιό'},
                                     'gen': {'ειδοποιού'},
                                     'nom': {'ειδοποιό'},
                                     'voc': {'ειδοποιό'}}}},
             'adv': {'ειδοποιά'}}

        )

    def test_adj_apatwr(self):
        # self.maxDiff = None
        self.assertDictEqual(
            Adjective('απάτωρ').all(),
            {'adj':
                 {'pl':
                      {'masc': {'gen': {'απατόρων'}, 'nom': {'απάτορες'}, 'voc': {'απάτορες'}, 'acc': {'απάτορες'}},
                       'fem': {'gen': {'απατόρων'}, 'nom': {'απάτορες'}, 'voc': {'απάτορες'}, 'acc': {'απάτορες'}},
                       'neut': {'gen': {''}, 'nom': {''}, 'voc': {''}, 'acc': {''}}},
                  'sg': {'masc': {'gen': {'απάτορος'}, 'nom': {'απάτωρ'}, 'voc': {'απάτορ'}, 'acc': {'απάτορα'}},
                         'fem': {'gen': {'απάτορος'}, 'nom': {'απάτωρ'}, 'voc': {'απάτορ'}, 'acc': {'απάτορα'}},
                         'neut': {'gen': {''}, 'nom': {''}, 'voc': {''}, 'acc': {''}}}}}
        )

    def test_anakatosouras(self):
        self.assertDictEqual(
            Adjective('ανακατωσούρας').all(),
            {'adj':
                 {'sg':
                      {'neut':
                           {'nom': {'ανακατωσούρικο'}, 'acc': {'ανακατωσούρικο'}, 'gen': {'ανακατωσούρικου'}, 'voc': {'ανακατωσούρικο'}},
                       'masc':
                           {'nom': {'ανακατωσούρας'}, 'acc': {'ανακατωσούρα'}, 'gen': {'ανακατωσούρα'}, 'voc': {'ανακατωσούρα'}},
                       'fem':
                           {'nom': {'ανακατωσούρα'}, 'acc': {'ανακατωσούρα'}, 'gen': {'ανακατωσούρας'}, 'voc': {'ανακατωσούρα'}}},
                  'pl':
                      {'neut':
                           {'nom': {'ανακατωσούρικα'}, 'acc': {'ανακατωσούρικα'}, 'gen': {'ανακατωσούρικων'}, 'voc': {'ανακατωσούρικα'}},
                       'masc':
                           {'nom': {'ανακατωσούραδες'}, 'acc': {'ανακατωσούραδες'}, 'gen': {'ανακατωσούραδων'}, 'voc': {'ανακατωσούραδες'}},
                       'fem':
                           {'nom': {'ανακατωσούρες'}, 'acc': {'ανακατωσούρες'}, 'gen': {''}, 'voc': {'ανακατωσούρες'}}}}, 'adv': {'ανακατωσούρικα'}}
        )

    def test_parwn(self):
        self.maxDiff = None
        self.assertDictEqual(
            Adjective('παρών').all(),
            {'adj': {
                'pl': {'masc': {'voc': {'παρόντες'}, 'nom': {'παρόντες'}, 'acc': {'παρόντες'}, 'gen': {'παρόντων'}},
                       'fem': {'voc': {'παρούσες'}, 'nom': {'παρούσες'}, 'acc': {'παρούσες'}, 'gen': {'παρουσών'}},
                       'neut': {'voc': {'παρόντα'}, 'nom': {'παρόντα'}, 'acc': {'παρόντα'}, 'gen': {'παρόντων'}}},
                'sg': {'masc': {'voc': {'παρών', 'παρόντα'}, 'nom': {'παρών', 'παρόντας'}, 'acc': {'παρόντα'}, 'gen': {'παρόντος', 'παρόντα'}},
                       'fem': {'voc': {'παρούσα'}, 'nom': {'παρούσα'}, 'acc': {'παρούσα'}, 'gen': {'παρούσας', 'παρούσης'}},
                       'neut': {'voc': {'παρόν'}, 'nom': {'παρόν'}, 'acc': {'παρόν'}, 'gen': {'παρόντος'}}}}}

        )

    def test_oksus(self):
        self.assertDictEqual(
            Adjective('οξύς').all(),
            {'adj': {'pl': {'fem': {'acc': {'οξείες', 'οξιές'},
                                    'gen': {'οξειών', 'οξιών'},
                                    'nom': {'οξείες', 'οξιές'},
                                    'voc': {'οξείες', 'οξιές'}},
                            'masc': {'acc': {'οξείς', 'οξιούς'},
                                     'gen': {'οξιών', 'οξέων'},
                                     'nom': {'οξιοί', 'οξείς'},
                                     'voc': {'οξιοί', 'οξείς'}},
                            'neut': {'acc': {'οξέα', 'οξιά'},
                                     'gen': {'οξιών', 'οξέων'},
                                     'nom': {'οξέα', 'οξιά'},
                                     'voc': {'οξέα', 'οξιά'}}},
                     'sg': {'fem': {'acc': {'οξείαν', 'οξεία', 'οξιά'},
                                    'gen': {'οξιάς', 'οξείας'},
                                    'nom': {'οξεία', 'οξιά'},
                                    'voc': {'οξεία', 'οξιά'}},
                            'masc': {'acc': {'οξύ'},
                                     'gen': {'οξιού', 'οξέος', 'οξύ'},
                                     'nom': {'οξύς'},
                                     'voc': {'οξύ'}},
                            'neut': {'acc': {'οξύ'},
                                     'gen': {'οξιού', 'οξέος', 'οξύ'},
                                     'nom': {'οξύ'},
                                     'voc': {'οξύ'}}}},
             'adv': {'οξέως'},
             'comp': {'pl': {'fem': {'acc': {'οξύτερες'},
                                     'gen': {'οξύτερων'},
                                     'nom': {'οξύτερες'},
                                     'voc': {'οξύτερες'}},
                             'masc': {'acc': {'οξύτερους'},
                                      'gen': {'οξύτερων'},
                                      'nom': {'οξύτεροι'},
                                      'voc': {'οξύτεροι'}},
                             'neut': {'acc': {'οξύτερα'},
                                      'gen': {'οξύτερων'},
                                      'nom': {'οξύτερα'},
                                      'voc': {'οξύτερα'}}},
                      'sg': {'fem': {'acc': {'οξύτερη'},
                                     'gen': {'οξύτερης'},
                                     'nom': {'οξύτερη'},
                                     'voc': {'οξύτερη'}},
                             'masc': {'acc': {'οξύτερο'},
                                      'gen': {'οξύτερου'},
                                      'nom': {'οξύτερος'},
                                      'voc': {'οξύτερε'}},
                             'neut': {'acc': {'οξύτερο'},
                                      'gen': {'οξύτερου'},
                                      'nom': {'οξύτερο'},
                                      'voc': {'οξύτερο'}}}},
             'comp_adv': {'οξύτερα'},
             'superl': {'pl': {'fem': {'acc': {'οξύτατες'},
                                       'gen': {'οξύτατων'},
                                       'nom': {'οξύτατες'},
                                       'voc': {'οξύτατες'}},
                               'masc': {'acc': {'οξύτατους'},
                                        'gen': {'οξύτατων'},
                                        'nom': {'οξύτατοι'},
                                        'voc': {'οξύτατοι'}},
                               'neut': {'acc': {'οξύτατα'},
                                        'gen': {'οξύτατων'},
                                        'nom': {'οξύτατα'},
                                        'voc': {'οξύτατα'}}},
                        'sg': {'fem': {'acc': {'οξύτατη'},
                                       'gen': {'οξύτατης'},
                                       'nom': {'οξύτατη'},
                                       'voc': {'οξύτατη'}},
                               'masc': {'acc': {'οξύτατο'},
                                        'gen': {'οξύτατου'},
                                        'nom': {'οξύτατος'},
                                        'voc': {'οξύτατε'}},
                               'neut': {'acc': {'οξύτατο'},
                                        'gen': {'οξύτατου'},
                                        'nom': {'οξύτατο'},
                                        'voc': {'οξύτατο'}}}},
             'superl_adv': {'οξύτατα'}}

        )

    def test_upnaras(self):
        self.assertDictEqual(
            Adjective('υπναράς').all(),
            {'adj': {'pl': {'fem': {'acc': {'υπναρούδες'},
                                    'gen': {'υπναρούδων'},
                                    'nom': {'υπναρούδες'},
                                    'voc': {'υπναρούδες'}},
                            'masc': {'acc': {'υπναράδες'},
                                     'gen': {'υπναράδων'},
                                     'nom': {'υπναράδες'},
                                     'voc': {'υπναράδες'}},
                            'neut': {'acc': {'υπναράδικα'},
                                     'gen': {'υπναράδικων'},
                                     'nom': {'υπναράδικα'},
                                     'voc': {'υπναράδικα'}}},
                     'sg': {'fem': {'acc': {'υπναρού'},
                                    'gen': {'υπναρούς'},
                                    'nom': {'υπναρού'},
                                    'voc': {'υπναρού'}},
                            'masc': {'acc': {'υπναρά'},
                                     'gen': {'υπναρά'},
                                     'nom': {'υπναράς'},
                                     'voc': {'υπναρά'}},
                            'neut': {'acc': {'υπναράδικο'},
                                     'gen': {'υπναράδικου'},
                                     'nom': {'υπναράδικο'},
                                     'voc': {'υπναράδικο'}}}}},
            # ic(Adj('υπναράς').all())

        )
    def test_eteroxthwn(self):
        self.assertDictEqual(
            Adjective('ετερόχθων').all(),
            {'adj':
                 {'sg':
                      {'fem':
                           {'voc': {'ετερόχθων'}, 'nom': {'ετερόχθων'}, 'acc': {'ετερόχθονα'}, 'gen': {'ετερόχθονος'}},
                       'neut':
                           {'voc': {'ετερόχθον'}, 'nom': {'ετερόχθον'}, 'acc': {'ετερόχθον'}, 'gen': {'ετερόχθονος'}},
                       'masc':
                           {'nom': {'ετερόχθων'}, 'gen': {'ετερόχθονα', 'ετερόχθονος'}, 'acc': {'ετερόχθονα'}, 'voc': {'ετερόχθων'}}},
                  'pl': {'fem':
                             {'voc': {'ετερόχθονες'}, 'nom': {'ετερόχθονες'}, 'acc': {'ετερόχθονες'}, 'gen': {'ετεροχθονών'}},
                         'neut':
                             {'voc': {'ετερόχθονα'}, 'nom': {'ετερόχθονα'}, 'acc': {'ετερόχθονα'}, 'gen': {'ετεροχθόνων'}},
                         'masc':
                             {'nom': {'ετερόχθονες'}, 'gen': {'ετεροχθόνων'}, 'acc': {'ετερόχθονες'}, 'voc': {'ετερόχθονες'}}}}}

        )

    def test_prolalhsas(self):
        self.assertDictEqual(
            Adjective('προλαλήσαντας').all(),
            {'adj': {'sg': {
                'neut': {'acc': {'προλαλήσαν'}, 'nom': {'προλαλήσαν'}, 'gen': {'προλαλήσαντος'}, 'voc': {'προλαλήσαν'}},
                'masc': {'acc': {'προλαλήσαντα'}, 'nom': {'προλαλήσαντας'}, 'gen': {'προλαλήσαντα'},
                         'voc': {'προλαλήσαντα'}},
                'fem': {'acc': {'προλαλήσασα'}, 'nom': {'προλαλήσασα'}, 'gen': {'προλαλήσασας'},
                        'voc': {'προλαλήσασα'}}}, 'pl': {
                'neut': {'acc': {'προλαλήσαντα'}, 'nom': {'προλαλήσαντα'}, 'gen': {'προλαλησάντων'},
                         'voc': {'προλαλήσαντα'}},
                'masc': {'acc': {'προλαλήσαντες'}, 'nom': {'προλαλήσαντες'}, 'gen': {'προλαλησάντων'},
                         'voc': {'προλαλήσαντες'}},
                'fem': {'acc': {'προλαλήσασες'}, 'nom': {'προλαλήσασες'}, 'gen': {'προλαλησασών'},
                        'voc': {'προλαλήσασες'}}}}},
        )

    def test_makros(self):
        self.assertDictEqual(
            Adjective('μακρός').all(),
            {'adj': {'sg': {'masc': {'acc': {'μακρό'}, 'nom': {'μακρός'}, 'gen': {'μακρού'}, 'voc': {'μακρέ'}},
                            'fem': {'acc': {'μακρά'}, 'nom': {'μακρά'}, 'gen': {'μακράς'}, 'voc': {'μακρά'}},
                            'neut': {'acc': {'μακρό'}, 'nom': {'μακρό'}, 'gen': {'μακρού'}, 'voc': {'μακρό'}}},
                     'pl': {'masc': {'acc': {'μακρούς'}, 'nom': {'μακροί'}, 'gen': {'μακρών'}, 'voc': {'μακροί'}},
                            'fem': {'acc': {'μακρές'}, 'nom': {'μακρές'}, 'gen': {'μακρών'}, 'voc': {'μακρές'}},
                            'neut': {'acc': {'μακρά'}, 'nom': {'μακρά'}, 'gen': {'μακρών'}, 'voc': {'μακρά'}}}},
             'comp': {'sg': {'masc': {'acc': {'μακρότερο', 'μακρύτερο'}, 'nom': {'μακρύτερος', 'μακρότερος'},
                                      'gen': {'μακρύτερου', 'μακρότερου'}, 'voc': {'μακρότερε', 'μακρύτερε'}},
                             'fem': {'acc': {'μακρύτερη', 'μακρότερη'}, 'nom': {'μακρύτερη', 'μακρότερη'},
                                     'gen': {'μακρότερης', 'μακρύτερης'}, 'voc': {'μακρύτερη', 'μακρότερη'}},
                             'neut': {'acc': {'μακρότερο', 'μακρύτερο'}, 'nom': {'μακρότερο', 'μακρύτερο'},
                                      'gen': {'μακρύτερου', 'μακρότερου'}, 'voc': {'μακρότερο', 'μακρύτερο'}}}, 'pl': {
                 'masc': {'acc': {'μακρύτερους', 'μακρότερους'}, 'nom': {'μακρότεροι', 'μακρύτεροι'},
                          'gen': {'μακρύτερων', 'μακρότερων'}, 'voc': {'μακρότεροι', 'μακρύτεροι'}},
                 'fem': {'acc': {'μακρότερες', 'μακρύτερες'}, 'nom': {'μακρότερες', 'μακρύτερες'},
                         'gen': {'μακρύτερων', 'μακρότερων'}, 'voc': {'μακρότερες', 'μακρύτερες'}},
                 'neut': {'acc': {'μακρότερα', 'μακρύτερα'}, 'nom': {'μακρότερα', 'μακρύτερα'},
                          'gen': {'μακρύτερων', 'μακρότερων'}, 'voc': {'μακρότερα', 'μακρύτερα'}}}}, 'superl': {'sg': {
                'masc': {'acc': {'μακρότατο', 'μακρύτατο'}, 'nom': {'μακρύτατος', 'μακρότατος'},
                         'gen': {'μακρύτατου', 'μακρότατου'}, 'voc': {'μακρότατε', 'μακρύτατε'}},
                'fem': {'acc': {'μακρότατη', 'μακρύτατη'}, 'nom': {'μακρότατη', 'μακρύτατη'},
                        'gen': {'μακρύτατης', 'μακρότατης'}, 'voc': {'μακρότατη', 'μακρύτατη'}},
                'neut': {'acc': {'μακρότατο', 'μακρύτατο'}, 'nom': {'μακρότατο', 'μακρύτατο'},
                         'gen': {'μακρύτατου', 'μακρότατου'}, 'voc': {'μακρότατο', 'μακρύτατο'}}}, 'pl': {
                'masc': {'acc': {'μακρότατους', 'μακρύτατους'}, 'nom': {'μακρότατοι', 'μακρύτατοι'},
                         'gen': {'μακρότατων', 'μακρύτατων'}, 'voc': {'μακρότατοι', 'μακρύτατοι'}},
                'fem': {'acc': {'μακρύτατες', 'μακρότατες'}, 'nom': {'μακρύτατες', 'μακρότατες'},
                        'gen': {'μακρότατων', 'μακρύτατων'}, 'voc': {'μακρύτατες', 'μακρότατες'}},
                'neut': {'acc': {'μακρότατα', 'μακρύτατα'}, 'nom': {'μακρότατα', 'μακρύτατα'},
                         'gen': {'μακρότατων', 'μακρύτατων'}, 'voc': {'μακρότατα', 'μακρύτατα'}}}},
             'adv': {'μακρά', 'μακρώς'}, 'comp_adv': {'μακρότερα', 'μακρύτερα'},
             'superl_adv': {'μακρότατα', 'μακρύτατα'}})

    def test_eunous(self):
        self.assertDictEqual(
            Adjective('εύνους').all(),
            {'adj':
                 {'pl':
                      {'masc': {'acc': {'εύνοες'}, 'nom': {'εύνοες'}, 'voc': {'εύνοες'}, 'gen': {'ευνόων'}},
                       'neut': {'acc': {'εύνοα'}, 'nom': {'εύνοα'}, 'voc': {'εύνοα'}, 'gen': {'ευνόων'}},
                       'fem': {'acc': {'εύνοες'}, 'nom': {'εύνοες'}, 'voc': {'εύνοες'}, 'gen': {'ευνόων'}}},
                  'sg': {'masc': {'acc': {'εύνου'}, 'nom': {'εύνους'}, 'voc': {'εύνους'}, 'gen': {'εύνου'}},
                         'neut': {'acc': {'εύνουν'}, 'nom': {'εύνουν'}, 'voc': {'εύνουν'}, 'gen': {'εύνου'}},
                         'fem': {'acc': {'εύνου'}, 'nom': {'εύνους'}, 'voc': {'εύνους'}, 'gen': {'εύνου'}}}}}
        )

    def test_grizos(self):
        self.assertDictEqual(
            Adjective('γκρίζος').basic_forms,
            {'adj': 'γκρίζος/γκρίζα/γκρίζο', 'comparative': '', 'adverb': 'γκρίζα', 'adverb_comparative': ''},
        )

    def test_synanatrafeis(self):
        self.assertDictEqual(
            Adjective('συνανατραφείς').all(),
            {'adj': {'pl': {'fem': {'voc': {'συνανατραφείσες'}, 'nom': {'συνανατραφείσες'}, 'acc': {'συνανατραφείσες'},
                                    'gen': {'συνανατραφεισών'}},
                            'masc': {'voc': {'συνανατραφέντες'}, 'nom': {'συνανατραφέντες'}, 'acc': {'συνανατραφέντες'},
                                     'gen': {'συνανατραφέντων'}},
                            'neut': {'voc': {'συνανατραφέντα'}, 'nom': {'συνανατραφέντα'}, 'acc': {'συνανατραφέντα'},
                                     'gen': {'συνανατραφέντων'}}}, 'sg': {
                'fem': {'voc': {'συνανατραφείσα'}, 'nom': {'συνανατραφείσα'}, 'acc': {'συνανατραφείσα'},
                        'gen': {'συνανατραφείσας'}},
                'masc': {'voc': {'συνανατραφείς'}, 'nom': {'συνανατραφείς'}, 'acc': {'συνανατραφέντα'},
                         'gen': {'συνανατραφέντος'}},
                'neut': {'voc': {'συνανατραφέν'}, 'nom': {'συνανατραφέν'}, 'acc': {'συνανατραφέν'},
                         'gen': {'συνανατραφέντος'}}}}}
        )

    def test_diattontas(self):
        self.assertDictEqual(
            Adjective('διάττοντας').all(),
            {'adj': {'sg': {
                'masc': {'gen': {'διάττοντα'}, 'nom': {'διάττοντας'}, 'acc': {'διάττοντα'}, 'voc': {'διάττοντα'}},
                'fem': {'gen': {'διάττουσας'}, 'nom': {'διάττουσα'}, 'acc': {'διάττουσα'}, 'voc': {'διάττουσα'}},
                'neut': {'gen': {'διάττοντος'}, 'nom': {'διάττον'}, 'acc': {'διάττον'}, 'voc': {'διάττον'}}}, 'pl': {
                'masc': {'gen': {'διαττόντων'}, 'nom': {'διάττοντες'}, 'acc': {'διάττοντες'}, 'voc': {'διάττοντες'}},
                'fem': {'gen': {'διαττουσών'}, 'nom': {'διάττουσες'}, 'acc': {'διάττουσες'}, 'voc': {'διάττουσες'}},
                'neut': {'gen': {'διαττόντων'}, 'nom': {'διάττοντα'}, 'acc': {'διάττοντα'}, 'voc': {'διάττοντα'}}}}}

        ),

